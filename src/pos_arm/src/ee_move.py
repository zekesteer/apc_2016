#!/usr/bin/env python
import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import math

from std_msgs.msg import String

#moves the end effector based on making a change to end effector pose using shift_pose_target function (no change in reference frame required)
#we need to account for offset generated by hoover attachment

def ee_move():
	moveit_commander.roscpp_initialize(sys.argv)
	rospy.init_node('simple3',anonymous=True)

	scene = moveit_commander.PlanningSceneInterface()

	group = moveit_commander.MoveGroupCommander("manipulator")

	group.set_planner_id('RRTkConfigDefault')

	display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',moveit_msgs.msg.DisplayTrajectory)

	print "============ Reference frame: %s" % group.get_planning_frame()
 
	print "============ Waiting for RVIZ..."
	rospy.sleep(5)
	print "============ Starting script"

	## Get current EE Pose - RPY
	print "Current ee_link Pose is:"
	print group.get_current_pose(end_effector_link = "ee_link")

	## MOVEMENT IN X
	group.shift_pose_target(0,-0.25,end_effector_link = "ee_link")

	print "============ Waiting while RVIZ displays x movement..."
 	rospy.sleep(5)

	#group.plan()

	## Get current EE Pose - RPY
	#print "New ee_link Pose is (changed x):"
	#print group.get_current_pose(end_effector_link = "ee_link")

	## MOVEMENT IN Y
	#group.shift_pose_target(1,0.05,end_effector_link = "ee_link")

	#print "============ Waiting while RVIZ displays y movement..."
 	#rospy.sleep(5)

	group.go(wait=True)

	## Get current EE Pose - RPY
	#print "New ee_link Pose is (changed y):"
	#print group.get_current_pose(end_effector_link = "ee_link")

	## MOVEMENT IN Z
	#print "Z target is:"
	#print z_arm_target
	#group.shift_pose_target(2,0.05,end_effector_link = "ee_link")

	#print "============ Waiting while RVIZ displays z movement..."
 	#rospy.sleep(5)

	#group.go(wait=True)

	## Get current EE Pose - RPY
	#print "New ee_link Pose is (changed z):"
	#print group.get_current_pose(end_effector_link = "ee_link")

	#collision_object = moveit_msgs.msg.CollisionObject()

	moveit_commander.roscpp_shutdown()
	#rospy.spin()
	
	print "============ STOPPING"

if __name__=='__main__':
  try:
    ee_move()
  except rospy.ROSInterruptException:
    pass

	
